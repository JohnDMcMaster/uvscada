# Generated by uvusbreplay 0.1
# uvusbreplay copyright 2011 John McMaster <JohnDMcMaster@gmail.com>
# cmd: /home/mcmaster/bin/usbrply bp1410_15_startup_cold.cap --comment --fx2 --device 24 -r 169:264 --sleep
        
import binascii
import time
import usb1

from uvscada.usb import usb_wraps
from uvscada.bpm.bp1410_fw import load_fx2
from uvscada.bpm import bp1410_fw_sn

def validate_read(expected, actual, msg):
    if expected != actual:
        print 'Failed %s' % msg
        print '  Expected; %s' % binascii.hexlify(expected,)
        print '  Actual:   %s' % binascii.hexlify(actual,)
        #raise Exception('failed validate: %s' % msg)


def replay(dev):
    bulkRead, bulkWrite, controlRead, _controlWrite = usb_wraps(dev)

    # Generated from packet 169/170
    # ...
    # Generated from packet 179/180
    load_fx2(dev)
    
    # Generated from packet 187/188
    buff = controlRead(0xC0, 0xB0, 0x0000, 0x0000, 4096)
    # NOTE:: req max 4096 but got 3
    validate_read("\x00\x00\x00", buff, "packet 187/188")
    
    # Generated from packet 195/196
    buff = controlRead(0xC0, 0xB0, 0x0000, 0x0000, 4096)
    # NOTE:: req max 4096 but got 3
    validate_read("\x00\x00\x00", buff, "packet 195/196")
    # Generated from packet 197/198
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 4
    validate_read("\x08\x16\x01\x00", buff, "packet 197/198")
    
    # Generated from packet 205/206
    buff = controlRead(0xC0, 0xB0, 0x0000, 0x0000, 4096)
    # NOTE:: req max 4096 but got 3
    validate_read("\x00\x00\x00", buff, "packet 205/206")
    # Generated from packet 207/208
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 4
    validate_read("\x08\x16\x01\x00", buff, "packet 207/208")
    
    # Generated from packet 209/210
    bulkWrite(0x02, "\x01")
    # Generated from packet 211/212
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 132
    validate_read("\x08\x80\xA4\x06\x02\x00\x22\x00\x43\x00\xC0\x03\x00\x08\xF8\x19"
              "\x00\x00\x30\x00\x80\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x09\x00"
              "\x08\x00\xFF\x00\xE0\x14\x00\x00\xE8\x14\x00\x00\x84\x1C\x00\x00"
              "\xEC\x14\x00\x00\xD0\x19\xFF\xFF\xC0\x19\xFF\xFF\x00\x00\xF0\x3C"
              "\xFF\xFF\x00\x00\x00\x00\x02\x00\x80\x01\xD0\x01\x02\x00\x01\x00"
              "\x00\x00\x56\x10\x00\x00\x88\x1B\x00\x00\x6C\x1B\x00\x00\x00\x00"
              "\x00\x00\x64\x1B\x00\x00\x66\x1B\x00\x00\x68\x1B\x00\x00\x44\x1C"
              "\x00\x00\x70\x1B\x00\x00\x30\x11\x00\x00\x34\x11\x00\x00\x74\x1B"
              "\x00\x00\x81\x00", buff, "packet 211/212")
    
    # Generated from packet 213/214
    bulkWrite(0x02, "\x43\x19\x00\x00\x00\x3B\x66\x1B\x00\x00\xFE\xFF\x3B\x64\x1B\x00"
              "\x00\xFE\xFF\x00")
    # Generated from packet 215/216
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 5
    validate_read("\x08\xA4\x06\x02\x00", buff, "packet 215/216")
    
    # Generated from packet 217/218
    bulkWrite(0x02, "\x01")
    # Generated from packet 219/220
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 132
    validate_read("\x08\x80\xA4\x06\x02\x00\x22\x00\x43\x00\xC0\x03\x00\x08\xF8\x19"
              "\x00\x00\x30\x00\x80\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x09\x00"
              "\x08\x00\xFF\x00\xE0\x14\x00\x00\xE8\x14\x00\x00\x84\x1C\x00\x00"
              "\xEC\x14\x00\x00\xD0\x19\xFF\xFF\xC0\x19\xFF\xFF\x00\x00\xF0\x3C"
              "\xFF\xFF\x00\x00\x00\x00\x02\x00\x80\x01\xD0\x01\x02\x00\x01\x00"
              "\x00\x00\x56\x10\x00\x00\x88\x1B\x00\x00\x6C\x1B\x00\x00\x00\x00"
              "\x00\x00\x64\x1B\x00\x00\x66\x1B\x00\x00\x68\x1B\x00\x00\x44\x1C"
              "\x00\x00\x70\x1B\x00\x00\x30\x11\x00\x00\x34\x11\x00\x00\x74\x1B"
              "\x00\x00\x81\x00", buff, "packet 219/220")

    # Generated from packet 221/222
    bulkWrite(0x02, "\x43\x19\x00\x00\x00\x11\xF0\xFF")
    
    '''
    The following are fired in rapid succession without waiting for ack
    Appears to be some sort of firmware load
    '''
    # Generated from packet 223/228
    bulkWrite(0x02, bp1410_fw_sn.p223)
    # Generated from packet 224/229
    bulkWrite(0x02, bp1410_fw_sn.p224)
    # Generated from packet 225/230
    bulkWrite(0x02, bp1410_fw_sn.p225)
    # Generated from packet 226/231
    bulkWrite(0x02, bp1410_fw_sn.p226)
    # Generated from packet 227/232
    bulkWrite(0x02, bp1410_fw_sn.p227)
    
    # Generated from packet 233/234
    bulkWrite(0x02, "\x5A")
    # Generated from packet 235/236
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 4
    validate_read("\x08\x80\x01\x00", buff, "packet 235/236")
    
    # Generated from packet 237/238
    bulkWrite(0x02, "\x11\x10\x00")
    
    # Generated from packet 239/240
    bulkWrite(0x02, "\xEA\xCC\x64\x01\x00\x08\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x3F")
    
    # Generated from packet 241/242
    bulkWrite(0x02, "\xA6")
    # Generated from packet 243/244
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 4
    
    validate_read("\x08\x81\x01\x00", buff, "packet 243/244")
    # Generated from packet 245/246
    bulkWrite(0x02, "\x11\x4E\x00")
    # Generated from packet 247/248
    bulkWrite(0x02, "\xE8\x00\x00\x00\x00\xFA\x5A\x83\xEA\x05\x81\xEA\x00\x00\x01\x00"
              "\x81\xFA\x00\x00\x01\x00\x74\x1F\xBB\x00\x00\x00\x00\xB9\x00\x00"
              "\x01\x00\x66\x8B\x02\x66\x89\x83\x00\x00\x01\x00\x83\xC2\x02\x83"
              "\xC3\x02\x83\xE9\x02\x75\xEB\x8C\xC8\x50\xB8\xF0\xFF\x01\x00\x50"
              "\x0F\x20\xC0\x0D\x00\x00\x00\x60\x0F\x22\xC0\x0F\x09\xC3")
    # Generated from packet 249/250
    bulkWrite(0x02, "\xDB")
    # Generated from packet 251/252
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 4
    validate_read("\x08\x82\x01\x00", buff, "packet 251/252")
    # Generated from packet 253/254
    bulkWrite(0x02, "\x82")
    # Generated from packet 255/256
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 4
    validate_read("\x08\x16\x01\x00", buff, "packet 255/256")
    # Generated from packet 257/258
    bulkWrite(0x02, "\x01")
    # Generated from packet 259/260
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 136
    validate_read("\x08\x84\xA4\x06\x02\x00\x26\x00\x43\x00\xC0\x03\x00\x08\x10\x24"
              "\x00\x00\x30\x00\x80\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x09\x00"
              "\x08\x00\xFF\x00\xC4\x1E\x00\x00\xCC\x1E\x00\x00\xB4\x46\x00\x00"
              "\xD0\x1E\x00\x00\xC0\x1E\x01\x00\xB0\x1E\x01\x00\x00\x00\x30\x55"
              "\x01\x00\x00\x00\x00\x00\x02\x00\x80\x01\xD0\x01\x02\x00\x01\x00"
              "\x00\x00\x56\x10\x00\x00\xA0\x25\x00\x00\x84\x25\x00\x00\x00\x00"
              "\x01\x00\x7C\x25\x00\x00\x7E\x25\x00\x00\x80\x25\x00\x00\x74\x46"
              "\x00\x00\x38\x11\x00\x00\x3C\x11\x00\x00\x40\x11\x00\x00\x44\x11"
              "\x00\x00\xC0\x1E\x00\x00\x85\x00", buff, "packet 259/260")
    # Generated from packet 261/262
    bulkWrite(0x02, "\x0E\x00")
    # Generated from packet 263/264
    buff = bulkRead(0x86, 0x0200)
    # NOTE:: req max 512 but got 35
    validate_read("\x08\x3A\x00\x90\x32\xA7\x02\x2A\x86\x01\x95\x3C\x36\x90\x00\x1F"
              "\x00\x01\x00\xD6\x05\x01\x00\x72\x24\x22\x39\x00\x00\x00\x00\x27"
              "\x1F\x20\x00", buff, "packet 263/264")
    print 'S/N: %s' % binascii.hexlify(buff[7:9])

def open_dev(usbcontext=None):
    if usbcontext is None:
        usbcontext = usb1.USBContext()
    
    print 'Scanning for devices...'
    for udev in usbcontext.getDeviceList(skip_on_error=True):
        vid = udev.getVendorID()
        pid = udev.getProductID()
        if (vid, pid) == (0x14b9, 0x0001):
            print
            print
            print 'Found device'
            print 'Bus %03i Device %03i: ID %04x:%04x' % (
                udev.getBusNumber(),
                udev.getDeviceAddress(),
                vid,
                pid)
            return udev.open()
    raise Exception("Failed to find a device")

if __name__ == "__main__":
    import argparse 
    
    parser = argparse.ArgumentParser(description='Replay captured USB packets')
    args = parser.parse_args()

    usbcontext = usb1.USBContext()
    dev = open_dev(usbcontext)
    dev.claimInterface(0)
    #dev.resetDevice()
    replay(dev)


    # Done!
